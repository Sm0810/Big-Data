# -*- coding: utf-8 -*-
"""SMuci_heart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17b5Nzz69u-R8xoGV3MetiBKY4hhlVa4D
"""

df['outcome'].value_counts()

plt.pie(df['outcome'].value_counts(), labels = ['No heart disease','1st stage', '2nd stage', '3rd stage', '4th stage'])
plt.title("Outcome (pie)")
plt.show()

sns.scatterplot(data = df,
           x = 'age',
           y = 'cholesterol',
           hue = 'outcome')
plt.show()

sns.pairplot(data = df,
             x_vars = ['age', 'rest_blood_pressure', 'cholesterol', 'max_heart_rate'],
             y_vars = ['age', 'rest_blood_pressure', 'cholesterol', 'max_heart_rate'],
            hue = 'outcome')
plt.show()

df.columns

sns.scatterplot(data = df,
            x = 'age',
            y = 'max_heart_rate',
            hue = 'outcome')
plt.show()

sns.histplot(x = df.age,
            hue = df.rest_ecg,
            multiple = 'dodge')
plt.show()

sns.histplot(hue = df.outcome,
            x = df.rest_ecg,
            multiple = 'dodge')
plt.show()

new_df = df.copy()
new_df['sex'] = new_df['sex'].replace('Female', 0).copy()
new_df['sex'] = new_df['sex'].replace('Male', 1).copy()
new_df

df_corr = new_df[['age', 'sex', 'rest_blood_pressure', 'cholesterol',
                      'fast_blood_sugar', 'max_heart_rate', 'outcome']].corr()
df_corr

sns.heatmap(data = df_corr,
           annot = True)
plt.show()

"""# **5** | Questions
* **5.1** Analyze the relationship between 'chest_pain' and 'max_heart_rate' in the dataset and determine if there is any correlation or pattern between the type of chest pain ('chest_pain' variable) and the maximum heart rate achieved ('max_heart_rate' variable) with respect to the 'outcome' of the patients?

### **5.1** | Analyze the relationship between 'chest_pain' and 'max_heart_rate' in the dataset and determine if there is any correlation or pattern between the type of chest pain ('chest_pain' variable) and the maximum heart rate achieved ('max_heart_rate' variable) with respect to the 'outcome' of the patients?
"""

sns.barplot(data = df,
               x = 'chest_pain',
               y = 'max_heart_rate',
               hue = 'outcome')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder

# Encode categorical variables
label_encoder = LabelEncoder()
df['sex'] = label_encoder.fit_transform(df['sex'])
df['chest_pain'] = label_encoder.fit_transform(df['chest_pain'])
df['fast_blood_sugar'] = df['fast_blood_sugar'].astype(int)
df['rest_ecg'] = label_encoder.fit_transform(df['rest_ecg'])

X = df.drop('outcome', axis=1)
y = df['outcome']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

new_df = pd.DataFrame(new_data)
new_df['sex'] = label_encoder.transform(new_df['sex'])
new_df['chest_pain'] = label_encoder.transform(new_df['chest_pain'])
new_df['fast_blood_sugar'] = new_df['fast_blood_sugar'].astype(int)
new_df['rest_ecg'] = label_encoder.transform(new_df['rest_ecg'])

prediction = model.predict(new_df)
print("Predicted outcome:", prediction)

new_data1 = pd.DataFrame({'age': [62],
                         'sex': ['1'],
                         'chest_pain': ['3'],
                         'rest_blood_pressure': [180],
                         'cholesterol': [286],
                         'fast_blood_sugar': [True],
                         'rest_ecg': ['1'],
                         'max_heart_rate': [160],
                         'exercise_angina': [True]})

prediction = model.predict(new_data1)
print("Predicted outcome:", prediction)

new_data2 = pd.DataFrame({'age': [99],
                         'sex': ['1'],
                         'chest_pain': ['3'],
                         'rest_blood_pressure': [200],
                         'cholesterol': [400],
                         'fast_blood_sugar': [False],
                         'rest_ecg': ['1'],
                         'max_heart_rate': [200],
                         'exercise_angina': [True]})

prediction = model.predict(new_data2)
print("Predicted outcome:", prediction)

from sklearn.metrics import classification_report

# Generate classification report
report = classification_report(y_test, y_pred)
print("Classification Report:\n", report)